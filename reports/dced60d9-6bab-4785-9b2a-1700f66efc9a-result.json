{"name": "test_empty_username", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"f5dcab55feef2c2dc42ba908f64bd6c1\")>\n\n    @pytest.mark.negative\n    def test_empty_username(driver):\n        login_page = LoginPage(driver)\n        login_page.open(\"https://opensource-demo.orangehrmlive.com/web/index.php/auth/login\")\n        login_page.login(credentials[\"empty_username\"][\"username\"], credentials[\"empty_username\"][\"password\"])\n    \n>       errors = login_page.get_required_error()\n\ntests\\test_login.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\login_page.py:26: in get_required_error\n    self.wait.until(lambda d: len(self.find_elements(self.required_field_error)) > 0)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"f5dcab55feef2c2dc42ba908f64bd6c1\")>\nmethod = <function LoginPage.get_required_error.<locals>.<lambda> at 0x0000029E03B84F40>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:105: TimeoutException"}, "start": 1756827131904, "stop": 1756827146178, "uuid": "25aa5364-ec38-4b21-9371-ada8d64f4f1b", "historyId": "d663d298f676ecc8cf034decdb671655", "testCaseId": "d663d298f676ecc8cf034decdb671655", "fullName": "tests.test_login#test_empty_username", "labels": [{"name": "tag", "value": "negative"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_login"}, {"name": "host", "value": "HP"}, {"name": "thread", "value": "18896-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_login"}]}